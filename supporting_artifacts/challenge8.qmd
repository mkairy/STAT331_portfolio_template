---
title: "Challenge 8"
author: "Michelle Kairy"
format: 
  html:
    mainfont: "Helvetica"
    fontcolor: "#624C2D"
    monobackgroundcolor: "#E9D9C3"
    self-contained: true
editor: visual
---

### Set-Up

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(here)
library(glue)
library(english)
library(purrr)
```

### Load Data

```{r}
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```

#### Step One: Pluralize Function

```{r}

pluralize_gift <- function(x){
 x <-  x |> 
    str_c("s", sep = "") |> 
    str_replace("ys$", "ies") |>
    str_replace("oo[:alpha:]+", "eese")
  return(x)
}
```

```{r}
# Will work if your function is vectorized! 
pluralize_gift(xmas$Gift.Item)

# Will work if your function is not vectorized!
map_chr(xmas$Gift.Item, pluralize_gift)
```

#### Step Two: Creating Sentences

```{r phrase-function}
make_phrase <- function(num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  item <- str_replace_na(item, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- ifelse(num_word != "one", pluralize_gift(item), item)
  ## Step 3: If the word starts with a vowel, add "an" to the beginning
  item <- str_replace_all(item, "^(?=[aeiou])", "an ")
  ## Step 4: Glue all of the pieces together!
  
  
  line <- ifelse(num_word != "one", str_squish(glue("{num_word} {adjective} {item} {verb} {location}")), str_squish(glue("a {adjective} {item} {verb} {location}")))
 
  return(line)

}
```

##### Full.Phrase Column

```{r}
xmas2 <- xmas %>%
  mutate(day.num = as.character(english::english(Day)
                                ), 
    Full.Phrase = pmap_chr(
      list(
           num_word = day.num,
           item = Gift.Item,
           verb = Verb,
           adjective = Adjective,
           location = Location),
      make_phrase
      )
  )
```

#### Step Three: Iteration

```{r}
sing_day <- function(dataset, line, phrase_col){
  
  # Step 1: Setup the intro line
  num_word <- english::ordinal(line)
  
  intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me:")
  
  # Step 2: Sing the gift phrases

    phrases <- dataset |>
      pull( {{phrase_col}} )

  # All together
    phrase <- c(intro, phrases[line:1])
    
    if (line > 2){
      phrase <- str_replace_all(phrase, "(?<=[:alpha:])$",",")
      phrase[length(phrase)] <- str_replace_all(phrase[length(phrase)], ",", ".")
      
    } else {
      phrase[length(phrase)] <- str_c(phrase[length(phrase)], ".")
    }
      
    phrase <- if_else(line != 1, glue_collapse(phrase, sep = "\n", last = "\nand "), glue_collapse(phrase, sep = "\n"))
    phrase <- glue("{phrase}\n\n")

    return(phrase)

}
  
```

#### Step Four: Using Functions

```{r}
#| layout-align: center

xmas2 <- xmas |>
  mutate(
    day.num = as.character(english::english(Day)), 
    Full.Phrase = pmap_chr(.l = list(num_word = day.num, 
                                     item = Gift.Item, 
                                     verb = Verb, 
                                     adjective = Adjective, 
                                     location = Location), 
                           .f = make_phrase)
  )

map_chr(1:12, ~sing_day(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()
```
